# node-logging

This library adds a very simple logging facility with automatic timestamping
and tagging (e.g, ``INF:``, ``DBG:``) of log messages.

Example output:

![Sample node-logging output](https://github.com/HerdHound/node-logging/raw/master/sample.jpg)

## Installing

To install, use NPM:

    npm install node-logging

## Usage

You can require it as usual:

    var logging = require('node-logging');

To change the log level:

    logging.setLevel('error');

There are four log levels ordered by importance (from least important to more
important):

 + _debug_: verbose debug messages
 + _info_: informational messages
 + _error_: error messages
 + _critical_: (bad) error messages

Setting the log level basically filters out messages of less importance. For
example, setting the log level to 'error' will filter out 'info' and 'debug'
messages (they simply won't be logged).

To log a single info message:

    logging.inf('Message');

Each log level has it's own method:

 + _debug_: logging.dbg()
 + _info_: logging.inf()
 + _error_: logging.err()
 + _critical_: logging.bad()

Each of the logging methods take a message as first argument, and optional
``trace`` flag. Trace flag will print out the stack trace immediately following
the log message if set to ``true``. For example:

    logging.bad('Woops!', true);

## Using the Express middleware

If you use Express, node-logging sports a middleware that will log details
about each of your requests (you can see it in the sample output at the
beginning of this file).

Simply add this middleware to the stack:

    app.use(logging.requestLogger);

During the request, the request object has a ``log`` property which houses a
few methods you can use to log more details about the request.

To log a single message, use the ``push`` method:

    req.log.push('Some point in execution');

To log an asynchronous call with timer:

    req.log.startTimer('MyTimer');

    setTimeout(function() {
      req.log.endMyTimer('Finished async operation'),
    }, 200);

The ``startTimer`` method takes a single argument, timer label. This timer
label becomes part of the method that stops it. In the above example, for the
label ``MyTimer``, you will get a method called ``endMyTimer``. If you label
your timer ``foo``, your end method will be ``endfoo``.

All messages that you log inside your request will appear under 'User messages'
section in your logs.

Here is a sample output:

![Sample output of the user messages](https://github.com/HerdHound/node-logging/raw/master/user_messages.jpg)

You can terminate logging without finishing the response by calling the
``req.log.terminate`` method. This method takes a single argument ``msg`` which
will be appended to the log. Normally, logging will only output the log if the 
response actually finishes. ``req.log.terminate`` method can be used to force
log output when you know response will never finish:

    app.get('/login', function(req, res, next) {

      User.find({username: req.param('username')}, function(err, user) {
        if (err) {
           req.log.terminate('Database error: ' + err);
           next(err);
           return;
        }

        // log the user in, etc, etc...

      });

    });

## Excluding parameters from request logger

Sometimes you don't want certain parameters logged. A good example is users'
clear-text passwords. In such cases, you can set excludes to skip these 
parameters.

    logging.setExcludes(['password', 'pw']);

By default, parameter called 'password' will be excluded. However, if you don't
want to exclude the 'password' parameter, you can just set the excludes to an
empty array:

    logging.setExcludes([]);

The above disables any excludes.

Excluded parameters will be logged as having value '(excluded)'. This is done
so that you can still see that the parameter was passed.
